// // урок 1
// числовой тип это number

// Арифметикой будет +-*/

// запись будет такой:
// 100 + 4 * 11
// (100 + 4) * 11

// Символ % используется для получения остатка. X % Y – остаток от деления X на Y.
// 314 % 100 даёт 14, и 144 % 12 даёт 0.


// спец,символы будут Infinity(положительный) and -Infinity(отрицательный)
// 3е число будет NaN


// // СУЩЕСТВУЕТ 3 ТИПА КАВЫЧЕК
// "привет" 'hi' hi


// `обратные кавычки имеют расщширеную функциональность и 
// позволяет выстраивать выраженную строку заключая их ${...}`
// к примеру:
// alert (результат:{1+2}); результат 3 и можно использовать только с обратными кавычками
// Строки нельзя делить, умножать и складывать. 
// Однако с ними можно использовать оператор +, он будет соединять их. ("сое" + "ди" + "н" + "ение")


// Последний логический оператор не унарный и не бинарный – он тройной. 
// Записывается при помощи вопросительного знака и двоеточия: это ?
// console.log(true ? 1 : 2);
// → 1
// console.log(false ? 1 : 2);
// → 2


// Неопределённые значения
// Существуют два специальных значения, null и undefined,
// Много операторов, которые не выдают значения, 
// возвращают undefined просто для того, чтобы что-то вернуть.
// Разница между undefined и null 
// появилась в языке случайно, и обычно не имеет значения.
// null представляет из себя ничего





// Объекты и символы
// Тип object (объект) – особенный.
// Все остальные типы называются «примитивными»,
// Тип symbol (символ) 
// используется для создания уникальных идентификаторов в объектах. 





// Оператор typeof
// typeof возвращает тип аргумента. 
// У него есть две синтаксические формы:

// 1. Синтаксис оператора: `typeof x`.
// 2. Синтаксис функции: `typeof(x)`.
// c скобками или без,одно и тоже....
// Вызов typeof x возвращает строку с именем типа:
// typeof undefined // "undefined"

// typeof 0 // "number"

// typeof 10n // "bigint"

// typeof true // "boolean"

// typeof "foo" // "string"

// typeof Symbol("id") // "symbol"

// typeof Math // "object"  (1)

// typeof null // "object"  (2)

// typeof alert // "function"  (3)







// // Последние три строки нуждаются в пояснении:

// Math — это встроенный объект, математических операций и константы,
// так же он служит для примеров объекта 
// Результатом вызова typeof null является "object". 
// официально признанная ошибка в typeof
// null не является объектом. Это специальное значение с отдельным типом.

// Вызов typeof alert возвращает "function"
// alert является функцией.

// Но typeof обрабатывает их особым образом, возвращая "function". 

// В js ЕСТЬ 8 ТИПОВ ДАННЫХ

// Семь из них называют «примитивными» типами данных:
// 1)number
// 2)bigint
// 3)string
// 4)boolean для true/false
// 5)null
// 6)undefined
// 7)symbol
// 1 ЯВЛЯЕТСЯ ПРИМИТИВНЫМ ЭТО object


// // СТРУКТУРА КОДА: ИНСТРУКЦИЯ ВЫРАЖЕНИЯ КОММЕНТАРИЙ 
// Окончание инструкции обозначается символом ; (точка с запятой)

// Мы уже видели инструкцию alert('Привет, мир!'), 
// которая отображает сообщение «Привет, мир!».

// // РЕКОМИНДАЦИЯ
// Я рекомендую ставить точку с запятой между инструкциями, даже если они отделены переносами строк. 
// Это правило широко используется в сообществе разработчиков. 
// Стоит отметить ещё раз – в большинстве случаев можно
// не ставить точку с запятой. Но безопаснее, особенно для новичка, ставить её.


// Простейшая инструкция – это выражение с точкой с запятой после него. 
// Это — программа:1; !false; и можно назвать его побочным эфектом






// // ПЕРЕМЕННЫЕ

// Переменная – это просто символьное имя для значения, которое 

// переменные - это "именнованные"
// Когда мы обращаемся по имени контейнера, но нам будет возвращаться то, 
// что находится внутри этого контейнера.
// let caught = 5 * 5;





// Специальное ключевое слово (keyword) let показывает
// что в этой инструкции мы объявляем переменную
// если мы сразу хотим назначить ей значение – оператор = и выражение.

// Величина переменной будет такой, какое значение в ней сейчас содержится

// let ten = 10;
// console.log(ten * ten);
// // → 100





// объявляет или определяет) переменную с именем message
// let message;

// используя оператор присваивания =
// let message;
// message = 'Hello'; // сохранить строку 'Hello' в переменной с именем message

// Sunsh1ne, [03.11.2023 17:30]
// можно совместить объявление переменной и запись данных в одну строку
// let message = 'Hello!'; // определяем переменную и присваиваем ей значение
// alert(message); // Hello!






// Мы также можем объявить несколько переменных в одной строке:
// let user = 'John', age = 25, message = 'Hello'; "НЕ РЕКОМЕНДУЕТЬСЯ"








// Многострочный вариант немного длиннее, но легче для чтения:
// let user = 'John';
// let age = 25;
// let message = 'Hello';










// // VAR УСТАРЕВШИЕ КЛЮЧЕВОЕ СЛОВО
// Есть тонкие различия между let и var, но они пока не имеют для нас значения.

// let mood = "лёгкое";
// console.log(mood);
// // → лёгкое
// mood = "тяжёлое";
// console.log(mood);
// // → тяжёлое


// так же можно скопировать друг в друга

// let hello = 'Hello world!';
// let message;
// // копируем значение 'Hello world' из переменной hello в переменную message
// message = hello;


// // теперь две переменные содержат одинаковые данные
// alert(hello); // Hello world!
// alert(message); // Hello world!





// Повторное объявление вызывает ошибку



// Переменная может быть объявлена только один раз.
// Повторное объявление той же переменной является ошибкой:

// `let message = "Это";

// // повторение ключевого слова 'let' приводит к ошибке
// let message = "Другое"; // SyntaxError: 'message' has already been declared`

// Поэтому следует объявлять переменную только один раз и затем использовать её уже без `let`.




// представь что переменные не могут быть в виде коробки, 
// а виде щупалец)))) интересна да?

// по сути они не содержат значения, а нагло хватают их

// Для запоминания количества денег, которые вам должен Василий, вы создаёте переменную. 
// Затем, когда он выплачивает часть долга, 
// вы даёте ей новое значение.

// // пример:

// let vasyaDebt = 140;
// vasyaDebt = vasyaDebt  - 35;
// console.log(vasyaDebt);
// // → 105

// когда вы определили переменную без присваивания значения,
// то щупальцам не за что держаться, а так они висят в воздухе,если запросите значение 
// то получите в ответ undefined

// Имена переменных

// В js есть 2 орграничения, касающих имен переменных

// Нельзя использовать знаки пунктуации, кроме символов $ и _

// Первый символ не должен быть цифрой.

// пример 

// let userName;
// let test123;

// Примеры неправильных имён переменных:
// let 1a; // не может начинаться с цифры

// let my-name; // дефис '-' не разрешён в имени





// // РЕГИСТР ИМЕЕТ ЗНАЧЕНИЕ

// Переменные с именами `apple` и `APPLE` – это две разные переменные.

// Нелатинские буквы разрешены, но не рекомендуются

// Приведённый ниже код даёт синтаксическую ошибку
// let let = 5; // нельзя назвать переменную "let", ошибка!
// let return = 5; // также нельзя назвать переменную "return", ошибка!

// (Константы)
// неизменяемую переменную, используйте const
//  вместо let: const myBirthday = '18.04.1982';
// const, называются «константами»
// Их нельзя изменить. Попытка сделать это приведёт к 
// ошибке:const myBirthday = '18.04.1982';

// myBirthday = '01.01.2001'; // ошибка, константу нельзя перезаписать!

// (Константы в верхнем регистре)
// практика использования констант в качестве псевдонимов 
// которые известны до начала исполнения скрипта.
// Названия таких констант пишутся с использованием 
// заглавных букв и подчёркивания.

// ПРИМЕР :
// const COLOR_RED = "#F00";
// const COLOR_GREEN = "#0F0";
// const COLOR_BLUE = "#00F";
// const COLOR_ORANGE = "#FF7F00";

// // ...когда нам нужно выбрать цвет
// let color = COLOR_ORANGE;
// alert(color); // #FF7F00


// (Преимущества:)

// - COLOR_ORANGE` гораздо легче запомнить, чем "#FF7F00"`.
// - Гораздо легче допустить ошибку при вводе `"#FF7F00", чем при вводе `COLOR_ORANGE.
// - При чтении кода `COLOR_ORANGE` намного понятнее, чем `#FF7F00`.

// "констант" - означает значение переменной никогда не меняется

// ИТОГО 
// Мы можем объявить переменные для хранения данных 
// с помощью ключевых слов `var`, `let` или `const`.

// - `let` – это современный способ объявления.
// - `var` – это устаревший способ объявления. Обычно мы вообще не используем его, 
// но мы рассмотрим тонкие отличия от `let` в главе 
// - const` – похоже на `let, но значение переменной не может изменяться.

// Переменные должны быть названы таким образом, чтобы мы могли легко понять, что у них внутри.
// // конец





// // (урок 2)

// Строгий режим - use strict

// убедитесь что use strict должен быть в начале

// Проверьте, что "use strict" находится в первой исполняемой строке скрипта, 
// иначе строгий режим может не включиться.

// use strict - это скрипт старых времен и он обеспечивает  совместимость старых скриптов.
// Директива вынглядит как строка: "use strict", 'use strict'  

// Когда она находится в начале скрипта, весь сценарий работает в «современном» режиме.


// // заметка: "use strict" в этом примере не используется

// num = 5; // если переменная "num" раньше не существовала, она создаётся

// alert(num); // 5



// Это плохая практика, которая приводит к ошибке в строгом режиме:
// "use strict";
// // Этот код работает в современном режиме

// num = 5; // ошибка: num is not defined

// здесь видно что строгий режим не вкл

// alert("some code");
// // "use strict" ниже игнорируется - он должен быть в первой строке

// "use strict";

// // строгий режим не активирован

// Над "use strict" могут быть записаны только коменты
// Нет никакого способа отменить `use strict`**

// Нет директивы типа `"no use strict"`, которая возвращала бы движок к старому поведению. 
// Как только мы входим в строгий режим, отменить это невозможно.


// консоль браузера:
// В дальнейшем когда будете использовать консоль, 
// то  use strict  по умолчанию будет выключен

// или есть вариант что use strict  имеет значение и может выдать вам ошибку,
// чтобы вкл use strict ,надо нажать на клавиши (shift+enter) для ввода строк и написать "use strict"

// работает в большинстве Chrome и Firefox

// 'use strict'; <Shift+Enter для перехода на новую строку>
// //  ...ваш код...
// <Enter для запуска></Enter>



// Если этого не происходит, например, в старом браузере, есть некрасивый, но надежный способ обеспечить use strict. 
// Поместите его в следующую обёртку:


// (function() {
//     'use strict';
  
//     // ...ваш код...
//   })()
// // конец






// //   начало 
// Взаимодействие: alert, prompt, confirm, console.log()

// ФУНКЦИИ :
// function(функция). Функция – отдельный кусочек программы, и можно использовать вместе с другими величинами

// к примеру alert он содержит ФУНКЦИИ,и показывает вывсвечивание окна браузера

// Она показывает сообщение и ждёт, пока пользователь нажмёт кнопку «ОК».
// alert("С добрым утром!");
// alert("Hello");

// prompt
// Функция promptпринимает два аргумента:
// let result = prompt(title, [default]);
// Этот код отобразит модальное окно с текстом, 
// полем для ввода текста и кнопками OK/Отмена.


// title Текст для отображения в окне.

// defaultНеобязательный второй параметр, который устанавливает начальное значение в поле для текста в окне.

// Квадратные скобки в синтаксисе [...]  default означают, что параметр факультативный, необязательный.

// Вызов prompt возвращает текст, указанный в поле для ввода, или null, если ввод отменён пользователем.
// Например:
// let age = prompt('Сколько тебе лет?', 100);

// alert(`Тебе ${age} лет!`); // Тебе 100 лет!

// Confirm
// Синтаксис:
// result = confirm(question);
// ​
// Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
// Результат – true, если нажата кнопка OK. В других случаях – false.
// Например:
// let isBoss = confirm("Ты здесь главный?");

// alert( isBoss ); // true, если нажата OK

// Итого

// Мы рассмотрели 3 функции браузера для взаимодействия с пользователем:
// `alert`**показывает сообщение.

// `prompt`**показывает сообщение и запрашивает ввод текста от пользователя. Возвращает напечатанный в поле ввода текст или `null`, если была нажата кнопка «Отмена» или Esc с клавиатуры.

// `confirm`**показывает сообщение и ждёт, пока пользователь нажмёт OK или Отмена. Возвращает `true`, если нажата OK, и `false`, если нажата кнопка «Отмена» или Esc с клавиатуры.


// Функция console.log
// Функция alert может использоваться как средство вывода при экспериментах, но закрывать каждый раз это окно вам скоро надоест. 
// В прошлых примерах я использовал функцию console.log для вывода значений. 
// Большинство систем JavaScript (включая все современные браузеры и Node.js) предоставляют функцию console.log, которая выводит величины на какое-либо устройство вывода. В браузерах это консоль JavaScript.
// В разных примерах результаты вывода показаны в комментариях:
// let x = 30;
// console.log("the value of x is", x);
// // → the value of x is 30
// // конец
// // начало
// Условное ветвление: if, '?'

// Управление порядком выполнения программы
// let yourNumber = Number(prompt("Выбери число", ""));
// alert("Твоё число – квадратный корень из " +  yourNumber * yourNumber);

// Функция Number преобразовывает величину в число.
// prompt возвращает строку
// сходные функции String и Boolean
// преобразующие величины в соответствующие типы

// Условное выполнение записывается при помощи ключевого слова if.
// если было введено именно число то  мы можем считать квадрат

// let yourNumber = Number(prompt("Выбери число", ""));

// if (!isNaN(yourNumber)) {
// 	alert("Твоё число – квадратный корень из " +  yourNumber * yourNumber);
// }
// Теперь, введя «сыр», вы не получите вывод.


// Инструкция if может содержать необязательный блок else («иначе»). Он выполняется, когда условие ложно

// let yourNumber = Number(prompt("Выбери число", ""));

// if (!isNaN(yourNumber)) {
// 	alert("Твоё число – квадратный корень из " + yourNumber * yourNumber);
// } else {
// 	alert("Ну ты что число-то не ввёл?");
// }


// Если вам нужно больше разных путей, можно использовать несколько пар `if/else` по цепочке.


// let num = Number(prompt("Выбери число", "0"));

// if (num < 10) {
// 	alert("Маловато");
// } else if (num < 100) {
// 	alert("Нормально");
// } else {
// 	alert("Многовато");
// }


// Преобразование к логическому типу
// if (…) вычисляет выражение в скобках и преобразует результат к логическому типу.


// Число 0, пустая строка "", null, undefined и NaN становятся false. 
// Из-за этого их называют «ложными» («falsy») значениями.
// Остальные значения становятся true, поэтому их называют «правдивыми» («truthy»).
// Таким образом, код при таком условии никогда не выполнится:
// if (0) { // 0 is falsy
//   ...
// }
// ​
// …а при таком – выполнится всегда:
// if (1) { // 1 is truthy
//   ...
// }
// ​
// Мы также можем передать заранее вычисленное в переменной логическое значение в if, например так:
// let condition = (year == 2015); // преобразуется к true или false

// if (condition) {
//   ...
// }


// Условный оператор „?“
// Иногда нам нужно определить переменную в зависимости от условия.
// Например:
// let accessAllowed;
// let age = prompt('Сколько вам лет?', '');

// if (age > 18) {
//   accessAllowed = true;
// } else {
//   accessAllowed = false;
// }

// alert(accessAllowed);

// Синтаксис:

// let result = условие ? значение1 : значение2;


// Сначала вычисляется `условие`: если оно истинно, тогда возвращается `значение1`, в противном случае – `значение2`.

// Например:
// let accessAllowed = (age > 18) ? true : false;


// Несколько операторов „?“

// Последовательность операторов вопросительного знака `?` позволяет вернуть значение, 
// которое зависит от более чем одного условия.
// let age = prompt('Возраст?', 18);

// let message = (age < 3) ? 'Здравствуй, малыш!' :
//   (age < 18) ? 'Привет!' :
//   (age < 100) ? 'Здравствуйте!' :
//   'Какой необычный возраст!';

// alert( message );

// 1. Первый знак вопроса проверяет `age < 3`.
// 2. Если верно – возвращает `'Здравствуй, малыш!'`. 
// В противном случае, проверяет выражение после двоеточия „:“, вычисляет `age < 18`.
// 3. Если это верно – возвращает `'Привет!'`. 
// В противном случае, проверяет выражение после следующего двоеточия „:“, вычисляет `age < 100`.
// 4. Если это верно – возвращает `'Здравствуйте!'`. 
// В противном случае, возвращает выражение после последнего двоеточия – `'Какой необычный возраст!'`.

// Вот как это выглядит при использовании `if..else`:

// if (age < 3) {
//     message = 'Здравствуй, малыш!';
//   } else if (age < 18) {
//     message = 'Привет!';
//   } else if (age < 100) {
//     message = 'Здравствуйте!';
//   } else {
//     message = 'Какой необычный возраст!';
//   }

// // конец




//  БАЗОВЫЕ ОПЕРАТОРЫ МАТЕМАТИКИ